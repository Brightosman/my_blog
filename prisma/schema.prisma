// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String  @id @unique
  email                 String
  firstName             String
  lastName              String
  profileImage          String
  // connectedAccountId    String  @unique //for digital market
  connectedAccountId    String ? @default("null")  //for Brile_Blog
  stripeConnectedLinked Boolean @default(false)

  Product Product[]

  //for Brile_Blog
  Site  Site[]
  posts Post[]
  Subscription Subscription?
}

model Product {
  id               String        @id @default(uuid())
  name             String
  price            Decimal       @db.Decimal(10, 2)
  smallDescription String
  description      Json
  images           String[]
  productFile      String
  category         CategoryTypes

  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum CategoryTypes {
  template
  uikit
  icon
  meat
  drink
}

model Site {
  id           String   @id @default(uuid())
  name         String
  description  String
  subdirectory String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  imageUrl String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  posts    Post[]
}

model Post {
  id String @id @default(uuid())

  title            String
  articleContent   Json
  smallDescription String
  image            String
  slug             String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Site      Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    String?
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}
